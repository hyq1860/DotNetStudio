
@{
    ViewBag.Title = "二维码管理";
    Layout = "~/Views/Shared/_LayoutHouTai.cshtml";
}

<div id="content" class="span10">
    <!-- content starts -->
    <div class="row-fluid sortable">
        <div class="box span12">
            <div class="box-header well" data-original-title>
                <h2><i class="icon-edit"></i>生成二维码</h2>
                <div class="box-icon">
                    <a href="#" class="btn btn-setting btn-round"><i class="icon-cog"></i></a>
                    <a href="#" class="btn btn-minimize btn-round"><i class="icon-chevron-up"></i></a>
                    <a href="#" class="btn btn-close btn-round"><i class="icon-remove"></i></a>
                </div>
            </div>
            <div class="box-content" id="qrContainer">
                <div id="alertMsg" class="alert alert-error hidden fade in"></div>
                <form class="form-horizontal" method="post" enctype="multipart/form-data">
                    <fieldset>
                        <input type="hidden" data-bind="value:Id" />
                        <div class="control-group">
                            <label class="control-label" for="focusedInput">二维码名称</label>
                            <div class="controls">
                                <input class="input-xlarge focused" type="text" data-bind="value:SourceName" maxlength="10">
                            </div>
                        </div>
                        <div class="control-group">
                            <label class="control-label" for="focusedInput">二维码标识</label>
                            <div class="controls">
                                <input class="input-xlarge focused" data-bind="value:SourceCode" id="SourceCode" type="text" maxlength="20">
                            </div>
                        </div>
                        <div class="control-group">
                            <label class="control-label" for="status">状态</label>
                            <div class="controls">
                                <select id="status" name="Status">
                                    <option value="1">使用</option>
                                    <option value="2">禁用</option>
                                </select>
                            </div>
                        </div>
                        <div class="form-actions">
                            <button type="button" class="btn btn-primary" data-bind="click:Save">添加</button>
                            <button class="btn" type="button" data-bind="click:Cancel">取消</button>
                        </div>
                    </fieldset>
                </form>
            </div>
        </div>
    </div>
    <div class="row-fluid sortable">

    </div><!--/row-->
    <div class="row-fluid sortable" id="qrCodeListContainer">
        <div class="box span12">
            <div class="box-header well" data-original-title>
                <h2>
                    <i class="icon-align-justify"></i>二维码列表
                </h2>
                <div class="box-icon">
                    <a href="#" class="btn btn-setting btn-round"><i class="icon-cog"></i></a>
                    <a href="#" class="btn btn-minimize btn-round"><i class="icon-chevron-up"></i></a>
                    <a href="#" class="btn btn-close btn-round"><i class="icon-remove"></i></a>
                </div>
            </div>
            <div class="box-content">
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>二维码名称</th>
                            <th>二维码标识</th>
                            <th>二维码图形地址</th>
                            <th>创建时间</th>
                            <th>邀请用户数量</th>
                        </tr>
                    </thead>
                    <tbody data-bind="foreach: qrList.List()">
                        <tr>
                            <td class="center"><!--ko text:Id--><!--/ko--></td>
                            <td class="center"><!--ko text:SourceName--><!--/ko--></td>
                            <td class="center"><!--ko text:SourceCode--><!--/ko--></td>
                            <td class="center"><a data-bind="attr:{href:QRCodeUrl()}" target="_blank">点击打开二维码</a></td>
                            <td class="center"><!--ko text:CreateTime--><!--/ko--></td>
                            <td class="center">
                            <!-- ko if: SourceCount()>0 -->
                                <a data-bind="text:SourceCount,attr:{href:'/houtai/userlistbysourceId?sourceId='+SourceCode()} "></a>
                            <!--/ko-->
                                <!-- ko if: SourceCount()==0 -->
                                0
                                <!--/ko-->
                            
                            </td>
                        </tr>
                    </tbody>
                </table>
                <div id="pages"></div>
            </div>
        </div>

    </div>
    <!-- content ends -->
</div>


@section scripts{
    <script type="text/javascript">
        var pageSize = 20;
        var pageIndex = 1;

        function pager(pageIndex, pageNo) {
            $("#pages").pager({ pagenumber: pageIndex, pagecount: pageNo, buttonClickCallback: pageClick });
        }
        function pageClick(pn) {
            pageIndex = pn;
            getList();
        }
        function FillList(data)
        {
            var length = data.List.length;
            pageSize = data.PageSize;
            pageIndex = data.PageIndex;
            window.qrList.PageIndex(data.PageIndex);
            window.qrList.PageSize(data.pageSize);
            window.qrList.Count(data.Count);
            window.qrList.List.removeAll();
            for (var i = 0; i < length; i++) {
                var qrm = new QrCodeModel();
                var item = data.List[i];
                qrm.Id(item.Id);
                qrm.SourceCode(item.SourceCode);
                qrm.SourceName(item.SourceName);
                qrm.Status(item.Status);
                qrm.QRCodeUrl(item.QRCodeUrl);
                qrm.CreateTime(ChangeDateFormat(item.CreateTime));
                qrm.SourceCount(item.SourceCount);
                window.qrList.List.push(qrm);
            }
        }
        function getList() {
            $.ajax({
                type: "POST",
                url: "/houtai/getqrList",
                data: "pageIndex=" + pageIndex + "&pageSize=" + pageSize,
                success: function (data) {
                    if (data) {
                        FillList(data);
                        pager(data.PageIndex, data.PageNo);
                    }
                }
            });
        }

        function QrCodeModel() {
            var self = this;

            self.Id = ko.observable();
            self.SourceCode = ko.observable();
            self.SourceName = ko.observable();
            self.QRCodeUrl = ko.observable();
            self.Status = ko.observable();
            self.CreateTime = ko.observable();
            self.SourceCount = ko.observable();
            self.Save = function () {
                if (!isNaN(self.SourceCode())) {
                    alert("二维码标识不能为纯数字");
                    $("#SourceCode").focus();
                    return;
                }

                var model = ko.toJSON(self);

                $.ajax({
                    url: "/HouTai/AddQRCode",
                    type: "post",
                    data: { qr: model },
                    dataType: 'json',
                    success: function (result) {
                        if (result > 0) {
                            alert("添加成功");
                            location.href = location.href;
                        } else {
                            alert("二维码标识重复或添加失败");
                        }
                    },
                    error: function (error) {
                        console.log(error);
                        alert("错误信息" + error);
                    }
                });
            };

            self.Cancel = function () {
                self.SourceCode("");
                self.SourceName("");
            };
      
        }


        function ListViewModel() {
            var self = this;
            self.List = ko.observableArray([]);
            self.PageSize = ko.observable();
            self.PageIndex = ko.observable();
            self.Count = ko.observable();
            self.PageNo = ko.observable();

        }

        $(function () {
            var qrModel = new QrCodeModel();
            window.qrModel = qrModel;
            ko.applyBindings(qrModel, document.getElementById("qrContainer"));

            var qrList = new ListViewModel();
            window.qrList = qrList;
            ko.applyBindings(qrList, document.getElementById("qrCodeListContainer"));
            getList();
        });






        function ChangeDateFormat(val) {
            if (val != null) {
                var date = new Date(parseInt(val.replace("/Date(", "").replace(")/", ""), 10));
                return date.Format("yyyy-MM-dd hh:mm:ss");
            }
            return null;
        }





        // 对Date的扩展，将 Date 转化为指定格式的String
        // 月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符，
        // 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)
        // 例子：
        // (new Date()).Format("yyyy-MM-dd hh:mm:ss.S") ==> 2006-07-02 08:09:04.423
        // (new Date()).Format("yyyy-M-d h:m:s.S")      ==> 2006-7-2 8:9:4.18
        Date.prototype.Format = function (fmt) { //author: meizz
            var o = {
                "M+": this.getMonth() + 1, //月份
                "d+": this.getDate(), //日
                "h+": this.getHours(), //小时
                "m+": this.getMinutes(), //分
                "s+": this.getSeconds(), //秒
                "q+": Math.floor((this.getMonth() + 3) / 3), //季度
                "S": this.getMilliseconds() //毫秒
            };
            if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
            for (var k in o)
                if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
            return fmt;
        }
    </script>
}



